# main.py

import sys
import os
from typing import Optional
from io import StringIO

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.backtest_engine import BacktestEngine
from analytics.performance_analyzer import PerformanceAnalyzer
from analytics.trade_recorder import TradeRecorder
from analytics.visualizer import BacktestVisualizer
from config.settings import BacktestConfig


class ConsoleCapture:
    """–ö–ª–∞—Å—Å –¥–ª—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞ –∫–æ–Ω—Å–æ–ª–∏ –≤ —Å—Ç—Ä–æ–∫—É –∏ –Ω–∞ —ç–∫—Ä–∞–Ω –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"""

    def __init__(self):
        self.captured_output = StringIO()
        self.original_stdout = sys.stdout

    def start_capture(self):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞"""
        sys.stdout = self

    def stop_capture(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π stdout"""
        sys.stdout = self.original_stdout

    def write(self, text):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –≤ –ª–æ–≥, –∏ –Ω–∞ —ç–∫—Ä–∞–Ω"""
        self.captured_output.write(text)
        self.original_stdout.write(text)

    def flush(self):
        """–û—á–∏—â–∞–µ—Ç –±—É—Ñ–µ—Ä—ã"""
        self.captured_output.flush()
        self.original_stdout.flush()

    def get_output(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥"""
        return self.captured_output.getvalue()


def main() -> bool:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–µ—Ä–∞"""

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç –∫–æ–Ω—Å–æ–ª–∏
    console_capture = ConsoleCapture()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = BacktestConfig()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö
    if not os.path.exists(config.data.csv_path):
        print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {config.data.csv_path}")
        print("–°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É 'data' –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ —Ç—É–¥–∞ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏")
        print("–§–æ—Ä–º–∞—Ç CSV: timestamp,open,high,low,close")
        return False

    try:
        # –ù–∞—á–∏–Ω–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
        console_capture.start_capture()

        print("-" * 60)
        print("–ó–ê–ü–£–°–ö –ë–≠–ö–¢–ï–°–¢–ê –ü–û –°–¢–†–ê–¢–ï–ì–ò–ò –ö–û–ù–¢–†–û–õ–¨–ù–´–• –¢–û–ß–ï–ö")
        print("-" * 60)
        print(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        print(f"  –°–∏–º–≤–æ–ª: {config.data.symbol}")
        print(f"  –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${config.trading.initial_capital:,.2f}")
        print(f"  –†–∞–∑–º–µ—Ä –º–∞—Ä–∂–∏: ${config.trading.position_size:,.2f}")
        print(f"  –ü–ª–µ—á–æ: {config.trading.leverage}x")
        print(f"  –ö–æ–º–∏—Å—Å–∏—è: {config.trading.taker_commission * 100:.3f}%")
        print(f"  Pivot –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: L={config.pivot.left_bars}, R={config.pivot.right_bars}")
        print()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –¥–≤–∏–∂–æ–∫
        engine = BacktestEngine(config)
        backtest_success = engine.run_backtest()

        if not backtest_success:
            console_capture.stop_capture()
            print("–ë—ç–∫—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
            return False

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = engine.get_results()

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        analyzer = PerformanceAnalyzer(
            equity_curve=results['equity_curve'],
            trades=results['trades'],
            initial_capital=config.trading.initial_capital
        )

        performance_metrics = analyzer.calculate_all_metrics()

        # –î–æ–ø–æ–ª–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª—é—á–µ–≤—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
        winning_trades = len([t for t in results['trades'] if t['pnl'] > 0])
        losing_trades = len([t for t in results['trades'] if t['pnl'] <= 0])
        total_commission = sum(t['commission'] for t in results['trades'])

        print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {performance_metrics['max_drawdown_percent']:.2f}%")
        print(f"–í–∏–Ω—Ä–µ–π—Ç: {winning_trades / max(1, len(results['trades'])) * 100:.1f}%")
        print(f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {len(results['trades'])}")
        print(f"–ü—Ä–∏–±—ã–ª—å–Ω—ã–µ: {winning_trades}")
        print(f"–£–±—ã—Ç–æ—á–Ω—ã–µ: {losing_trades}")
        print(f"–û–±—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏: ${total_commission:.2f}")
        print()
        print(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞: {performance_metrics['sharpe_ratio']:.3f}")
        print(f"–ü—Ä–æ—Ñ–∏—Ç-—Ñ–∞–∫—Ç–æ—Ä: {performance_metrics['profit_factor']:.3f}")
        print(f"–°—Ä–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞: ${performance_metrics['avg_trade']:.2f}")
        print("-" * 60)
        print("–≠–ö–°–ü–û–†–¢ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        print("-" * 60)

        recorder = TradeRecorder()
        recorder.export_trades_to_excel(
            trades=results['trades'],
            performance_metrics=performance_metrics,
            config=results['config']
        )

        print("–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤...")
        BacktestVisualizer()
        BacktestVisualizer.create_complete_report(
            equity_curve=results['equity_curve'],
            trades=results['trades'],
            config=results['config']
        )

        print("–ë–≠–ö–¢–ï–°–¢ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
        console_capture.stop_capture()
        console_output = console_capture.get_output()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –∫–æ–Ω—Å–æ–ª–∏ –≤ —Ñ–∞–π–ª
        recorder.save_console_log(console_output, results['config'])

        return True

    except KeyboardInterrupt:
        console_capture.stop_capture()
        print("\n–ë—ç–∫—Ç–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return False
    except Exception as e:
        console_capture.stop_capture()
        print(f"\n–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±—ç–∫—Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


def quick_test(data_file_path: Optional[str] = None) -> bool:

    config = BacktestConfig()

    if data_file_path:
        config.data.csv_path = data_file_path

    print("üöÄ –ë–´–°–¢–†–´–ô –¢–ï–°–¢")
    print("-" * 30)

    engine = BacktestEngine(config)
    test_success = engine.run_backtest()

    if test_success:
        results = engine.get_results()
        print(f"\nüìä –ë—ã—Å—Ç—Ä–∞—è —Å–≤–æ–¥–∫–∞:")
        print(f"   –°–¥–µ–ª–æ–∫: {len(results['trades'])}")
        print(f"   PnL: ${results['total_pnl']:+.2f}")
        print(f"   ROI: {(results['total_pnl'] / config.trading.initial_capital) * 100:+.1f}%")

    return test_success


if __name__ == "__main__":
    if len(sys.argv) > 1:
        if sys.argv[1] == '--quick':
            data_path = sys.argv[2] if len(sys.argv) > 2 else None
            test_result = quick_test(data_path)
            sys.exit(0 if test_result else 1)
        else:
            print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: {sys.argv[1]}")
            print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
            print("python main.py         - –ü–æ–ª–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç —Å –æ—Ç—á–µ—Ç–∞–º–∏")
            print("python main.py --quick - –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –±–µ–∑ –æ—Ç—á–µ—Ç–æ–≤")
            sys.exit(1)
    else:
        success = main()
        sys.exit(0 if success else 1)